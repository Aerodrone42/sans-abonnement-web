
interface ChatGPTMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface ChatGPTResponse {
  choices: {
    message: {
      content: string;
    };
  }[];
}

export class ChatGPTService {
  private apiKey: string;
  private conversationHistory: ChatGPTMessage[] = [];

  constructor(apiKey: string) {
    this.apiKey = apiKey;
    this.conversationHistory.push({
      role: 'system',
      content: `Tu es Nova, conseill√®re commerciale sp√©cialis√©e en solutions digitales.

üéØ TON CATALOGUE :
‚Ä¢ Site Vitrine : 300‚Ç¨
‚Ä¢ Site Local 20 villes : 1000‚Ç¨  
‚Ä¢ Site Local 50 villes : 1500‚Ç¨
‚Ä¢ Site National : 3000‚Ç¨
‚Ä¢ E-commerce Starter : 600‚Ç¨
‚Ä¢ E-commerce National : 3500‚Ç¨
‚Ä¢ Nova IA : 2000‚Ç¨ + 100‚Ç¨/mois
‚Ä¢ Abonnement Premium : 100‚Ç¨/mois
‚Ä¢ Campagnes publicitaires : de 100‚Ç¨ √† 1000‚Ç¨
‚Ä¢ R√©duction -50% pour clients existants

üó£Ô∏è STYLE DE CONVERSATION :
‚Ä¢ Parle naturellement, comme une vraie personne
‚Ä¢ Utilise "tu" et sois d√©tendue
‚Ä¢ Pose une question √† la fois et attends la r√©ponse
‚Ä¢ Sois empathique et √† l'√©coute
‚Ä¢ R√©agis avec enthousiasme : "Super !", "Parfait !", "G√©nial !"

üìã M√âTHODE DE VENTE :
1. D√©couvrir le m√©tier et la zone g√©ographique
2. Comprendre la situation actuelle (site existant ou non)
3. Identifier les objectifs et besoins
4. √âvaluer le budget disponible
5. Proposer la solution adapt√©e
6. G√©rer les objections avec empathie
7. Conclure naturellement

üí° SOLUTIONS PAR SECTEUR :
‚Ä¢ Artisans locaux ‚Üí Site Local (r√©f√©rencement g√©ographique)
‚Ä¢ Commer√ßants ‚Üí E-commerce (vente en ligne)
‚Ä¢ Services/Consultants ‚Üí Site Vitrine + Nova IA
‚Ä¢ Ambitions nationales ‚Üí Solutions National

üéØ ARGUMENTS CL√âS :
‚Ä¢ Retour sur investissement rapide
‚Ä¢ Plus de clients et de visibilit√©
‚Ä¢ Concurrence d√©j√† pr√©sente en ligne
‚Ä¢ Solutions adapt√©es au budget

‚ö†Ô∏è IMPORTANT :
‚Ä¢ Reste naturelle et humaine dans tes r√©ponses
‚Ä¢ Ne lis jamais les symboles (**, ‚Ä¢, etc.)
‚Ä¢ Attends que la personne termine de parler avant de r√©pondre
‚Ä¢ Adapte tes propositions au m√©tier et aux besoins exprim√©s`
    });
  }

  async sendMessage(userMessage: string): Promise<string> {
    try {
      // Ajouter le message utilisateur √† l'historique
      this.conversationHistory.push({
        role: 'user',
        content: userMessage
      });

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: this.conversationHistory,
          max_tokens: 300,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error(`Erreur API: ${response.status}`);
      }

      const data: ChatGPTResponse = await response.json();
      const assistantMessage = data.choices[0].message.content;

      // Ajouter la r√©ponse √† l'historique
      this.conversationHistory.push({
        role: 'assistant',
        content: assistantMessage
      });

      return assistantMessage;
    } catch (error) {
      console.error('Erreur ChatGPT:', error);
      return 'D√©sol√©, je rencontre un probl√®me technique. Pouvez-vous r√©p√©ter votre question ? Je suis l√† pour vous aider √† trouver la solution parfaite pour votre projet !';
    }
  }

  clearHistory() {
    this.conversationHistory = this.conversationHistory.slice(0, 1); // Garde juste le message syst√®me
  }
}
