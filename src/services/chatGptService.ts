
interface ChatGPTMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface ChatGPTResponse {
  choices: {
    message: {
      content: string;
    };
  }[];
}

export class ChatGPTService {
  private apiKey: string;
  private conversationHistory: ChatGPTMessage[] = [];

  constructor(apiKey: string) {
    this.apiKey = apiKey;
    // Message syst√®me pour d√©finir le comportement de l'IA comme conseiller commercial
    this.conversationHistory.push({
      role: 'system',
      content: `Tu es un conseiller commercial expert sp√©cialis√© dans le d√©veloppement web et l'IA. Ton r√¥le est d'aider les clients √† trouver la formule la plus adapt√©e √† leurs besoins parmi nos services.

NOS FORMULES DISPONIBLES :

üöÄ FORMULE STARTER (2 000‚Ç¨ - 5 000‚Ç¨)
- Site vitrine moderne et responsive
- 3-5 pages optimis√©es SEO
- Formulaire de contact
- Int√©gration r√©seaux sociaux
- H√©bergement 1 an inclus
- Id√©al pour : artisans, petites entreprises, professions lib√©rales

üíº FORMULE BUSINESS (5 000‚Ç¨ - 15 000‚Ç¨)
- Site web dynamique avec CMS
- E-commerce ou plateforme m√©tier
- Syst√®me de r√©servation/commande
- Tableau de bord administrateur
- Formation utilisateur incluse
- Id√©al pour : PME, boutiques en ligne, services B2B

ü§ñ FORMULE IA PREMIUM (15 000‚Ç¨ - 50 000‚Ç¨)
- Application web avec IA int√©gr√©e
- Chatbots intelligents personnalis√©s
- Automatisation des processus
- Analyse de donn√©es avanc√©e
- Interface utilisateur sur-mesure
- Support technique premium
- Id√©al pour : grandes entreprises, projets innovants, transformation digitale

√âTAPES DE CONSEIL :
1. √âcoute active du projet client
2. Questions pertinentes sur les besoins, budget, d√©lais
3. Analyse et recommandation de la formule adapt√©e
4. Explication des b√©n√©fices concrets
5. Proposition de prochaines √©tapes

Sois chaleureux, professionnel et orient√© solutions. Pose des questions pr√©cises pour bien cerner les besoins. R√©ponds toujours en fran√ßais et sois concis mais complet.`
    });
  }

  async sendMessage(userMessage: string): Promise<string> {
    try {
      // Ajouter le message utilisateur √† l'historique
      this.conversationHistory.push({
        role: 'user',
        content: userMessage
      });

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: this.conversationHistory,
          max_tokens: 300,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error(`Erreur API: ${response.status}`);
      }

      const data: ChatGPTResponse = await response.json();
      const assistantMessage = data.choices[0].message.content;

      // Ajouter la r√©ponse √† l'historique
      this.conversationHistory.push({
        role: 'assistant',
        content: assistantMessage
      });

      return assistantMessage;
    } catch (error) {
      console.error('Erreur ChatGPT:', error);
      return 'D√©sol√©, je rencontre un probl√®me technique. Pouvez-vous r√©p√©ter votre question ? Je suis l√† pour vous aider √† trouver la formule parfaite pour votre projet !';
    }
  }

  clearHistory() {
    this.conversationHistory = this.conversationHistory.slice(0, 1); // Garde juste le message syst√®me
  }
}
