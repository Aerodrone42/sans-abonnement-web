import { ChatGPTService } from './chatGptService';
import { learningService, ConversationData } from './learningService';

interface ClientInfo {
  nom?: string;
  email?: string;
  telephone?: string;
  metier?: string;
  zone?: string;
  budget?: string;
  urgence?: string;
  decideur?: string;
  situation?: string;
  objectif?: string;
  choixContact?: string;
  horaireRappel?: string;
  formulaireEtape?: string;
  entreprise?: string;
  message?: string;
  siteDesire?: string;
  tarif?: string;
  preferenceContact?: string;
  conversationStage?: string;
}

export class EnhancedChatGPTService extends ChatGPTService {
  private sessionId: string;
  private currentStage: number = 1;
  private clientInfo: ClientInfo = {};
  private fillFormCallback: ((data: any) => void) | null = null;
  private submitFormCallback: (() => Promise<void>) | null = null;
  private isInitialized: boolean = false;

  constructor(apiKey: string) {
    super(apiKey);
    this.sessionId = this.generateSessionId();
    this.isInitialized = true;
    learningService.startConversation(this.sessionId);
    console.log('üöÄ EnhancedChatGPTService STABLE initialis√© avec session:', this.sessionId);
  }

  setFormCallbacks(fillForm: (data: any) => void, submitForm: () => Promise<void>) {
    this.fillFormCallback = fillForm;
    this.submitFormCallback = submitForm;
    console.log('‚úÖ Callbacks de formulaire configur√©s STABLE');
  }

  async startConversation(): Promise<string> {
    if (!this.isInitialized) {
      console.log('‚ùå Service non initialis√©, impossible de d√©marrer');
      return "Erreur d'initialisation du service IA";
    }
    
    console.log('üéØ D√©marrage STABLE de la conversation avec Nova');
    this.clientInfo.conversationStage = 'accueil';
    return "Bonjour ! Je suis Nova, votre conseill√®re IA d'Aerodrone Multiservices. Je vais vous poser quelques questions rapides pour vous conseiller au mieux. Quel est votre secteur d'activit√© ?";
  }

  private generateSessionId(): string {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private extractClientInfo(message: string): void {
    const lowerMessage = message.toLowerCase();
    
    // CORRECTION CRITIQUE: Ne plus extraire automatiquement le m√©tier depuis n'importe quel message
    // Seulement extraire si on est dans la phase de qualification du m√©tier
    if (this.clientInfo.conversationStage === 'accueil' && !this.clientInfo.metier) {
      if (lowerMessage.includes('artisan') || lowerMessage.includes('plombier') || lowerMessage.includes('√©lectricien') || lowerMessage.includes('ma√ßon') || lowerMessage.includes('menuisier') || lowerMessage.includes('peintre') || lowerMessage.includes('chauffagiste') || lowerMessage.includes('couvreur')) {
        this.clientInfo.metier = 'Artisan du b√¢timent';
      } else if (lowerMessage.includes('restaurant') || lowerMessage.includes('caf√©') || lowerMessage.includes('bar') || lowerMessage.includes('boulangerie') || lowerMessage.includes('p√¢tisserie')) {
        this.clientInfo.metier = 'Restauration/Alimentation';
      } else if (lowerMessage.includes('coiffeur') || lowerMessage.includes('esth√©tique') || lowerMessage.includes('massage') || lowerMessage.includes('spa')) {
        this.clientInfo.metier = 'Beaut√©/Bien-√™tre';
      } else if (lowerMessage.includes('commerce') || lowerMessage.includes('magasin') || lowerMessage.includes('boutique') || lowerMessage.includes('vente')) {
        this.clientInfo.metier = 'Commerce/Retail';
      } else if (message.trim().length > 0 && !lowerMessage.includes('bonjour') && !lowerMessage.includes('informations')) {
        this.clientInfo.metier = message.trim();
      }
    }
    
    // Extraction de la situation SEULEMENT si on est dans cette phase
    if (this.clientInfo.conversationStage === 'qualification_besoin' && !this.clientInfo.situation) {
      if (lowerMessage.includes('pas de site') || lowerMessage.includes('aucun site') || lowerMessage.includes('pas encore')) {
        this.clientInfo.situation = 'Aucun site web actuellement';
      } else if (lowerMessage.includes('ancien site') || lowerMessage.includes('obsol√®te') || lowerMessage.includes('refaire')) {
        this.clientInfo.situation = 'Site existant √† moderniser';
      } else if (lowerMessage.includes('am√©liorer') || lowerMessage.includes('optimiser')) {
        this.clientInfo.situation = 'Site √† am√©liorer';
      }
    }
    
    // Extraction de la zone SEULEMENT si on est dans cette phase
    if (this.clientInfo.conversationStage === 'qualification_zone' && !this.clientInfo.zone) {
      if (lowerMessage.includes('ville') || lowerMessage.includes('local') || lowerMessage.includes('quartier')) {
        this.clientInfo.zone = 'Local (20 villes recommand√©es)';
      } else if (lowerMessage.includes('d√©partement') || lowerMessage.includes('r√©gion') || lowerMessage.includes('plusieurs villes')) {
        this.clientInfo.zone = 'D√©partemental/R√©gional (50 villes)';
      } else if (lowerMessage.includes('national') || lowerMessage.includes('france') || lowerMessage.includes('partout')) {
        this.clientInfo.zone = 'National';
      }
    }

    // D√©tecter le choix de contact SEULEMENT apr√®s la proposition
    if (this.clientInfo.conversationStage === 'proposition_contact') {
      if (lowerMessage.includes('formulaire') || lowerMessage.includes('email') || lowerMessage.includes('√©crit') || lowerMessage.includes('devis')) {
        this.clientInfo.choixContact = 'formulaire';
        this.clientInfo.conversationStage = 'collecte_infos_formulaire';
        this.clientInfo.formulaireEtape = 'nom';
        console.log('üìã Client a choisi le FORMULAIRE - d√©but collecte nom');
      } else if (lowerMessage.includes('appel') || lowerMessage.includes('t√©l√©phone') || lowerMessage.includes('rappel')) {
        this.clientInfo.choixContact = 'appel';
        this.clientInfo.conversationStage = 'collecte_infos_rappel';
        console.log('üìû Client a choisi l\'APPEL - d√©but collecte infos');
      }
    }

    // Extraction des informations personnelles SEULEMENT si le client a choisi "formulaire"
    if (this.clientInfo.choixContact === 'formulaire' && this.clientInfo.conversationStage === 'collecte_infos_formulaire') {
      // Nom/pr√©nom
      if (this.clientInfo.formulaireEtape === 'nom' && !this.clientInfo.nom) {
        this.clientInfo.nom = message.trim();
        this.clientInfo.formulaireEtape = 'email';
        console.log('üìù Nom extrait:', this.clientInfo.nom);
      }
      // Email
      else if (this.clientInfo.formulaireEtape === 'email' && !this.clientInfo.email) {
        const emailMatch = message.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/);
        if (emailMatch) {
          this.clientInfo.email = emailMatch[1];
          this.clientInfo.formulaireEtape = 'tel';
          console.log('üìù Email extrait:', this.clientInfo.email);
        }
      }
      // T√©l√©phone
      else if (this.clientInfo.formulaireEtape === 'tel' && !this.clientInfo.telephone) {
        const phoneMatch = message.match(/(\+33|0)[1-9](\d{8}|\s\d{2}\s\d{2}\s\d{2}\s\d{2})/);
        if (phoneMatch) {
          this.clientInfo.telephone = phoneMatch[0];
          this.clientInfo.formulaireEtape = 'entreprise';
          console.log('üìù T√©l√©phone extrait:', this.clientInfo.telephone);
        }
      }
      // Entreprise
      else if (this.clientInfo.formulaireEtape === 'entreprise' && !this.clientInfo.entreprise) {
        this.clientInfo.entreprise = message.trim();
        this.clientInfo.formulaireEtape = 'message';
        console.log('üìù Entreprise extraite:', this.clientInfo.entreprise);
      }
    }
    
    console.log('üìã Infos client extraites STABLE:', this.clientInfo);
  }

  async sendMessage(userMessage: string): Promise<string> {
    try {
      if (!this.isInitialized) {
        console.log('‚ùå Service non initialis√© pour sendMessage');
        return "Erreur de service, veuillez rafra√Æchir la page";
      }

      console.log('üìù Message utilisateur re√ßu STABLE:', userMessage);
      
      // Extraire les informations du client progressivement
      this.extractClientInfo(userMessage);
      
      // D√©terminer l'√©tape actuelle de la conversation
      this.updateConversationStage(userMessage);
      
      // Construire le prompt syst√®me avec les bonnes instructions
      const systemPrompt = this.buildSystemPrompt();
      
      // Envoyer le message avec le prompt syst√®me appropri√©
      const response = await super.sendMessage(userMessage, systemPrompt);
      console.log('üéØ R√©ponse IA re√ßue STABLE:', response);
      
      // Remplir le formulaire SEULEMENT si le client a choisi "formulaire"
      if (this.clientInfo.choixContact === 'formulaire') {
        this.fillFormProgressively();
      }
      
      return response;
    } catch (error) {
      console.error('Erreur Enhanced ChatGPT STABLE:', error);
      return 'D√©sol√©, je rencontre un probl√®me technique. Pouvez-vous r√©p√©ter votre question ?';
    }
  }

  private buildSystemPrompt(): string {
    const basePrompt = `Tu es Nova, conseill√®re IA d'Aerodrone Multiservices, sp√©cialiste en cr√©ation de sites web et r√©f√©rencement local.

R√àGLES IMPORTANTES:
- Quand tu proposes un contact, tu dis "voulez-vous qu'ON VOUS RAPPELLE ou pr√©f√©rez-vous remplir un formulaire ?"
- JAMAIS "m'appeler" ou "appeler l'IA" - c'est VOUS qui rappelez le CLIENT
- Tu collectes: secteur ‚Üí situation actuelle ‚Üí zone g√©ographique ‚Üí proposition ‚Üí choix contact
- Si formulaire choisi: nom ‚Üí email ‚Üí t√©l√©phone ‚Üí entreprise ‚Üí confirmation envoi

Informations actuelles du client:
- M√©tier: ${this.clientInfo.metier || 'Non sp√©cifi√©'}
- Situation: ${this.clientInfo.situation || 'Non sp√©cifi√©e'}
- Zone: ${this.clientInfo.zone || 'Non sp√©cifi√©e'}
- √âtape: ${this.clientInfo.conversationStage || 'accueil'}
- Choix contact: ${this.clientInfo.choixContact || 'Non choisi'}
- √âtape formulaire: ${this.clientInfo.formulaireEtape || 'Aucune'}

Services Aerodrone:
- Site vitrine: 590‚Ç¨ (20 villes r√©f√©renc√©es)
- Site business: 990‚Ç¨ (50 villes r√©f√©renc√©es)  
- Site e-commerce: 1490‚Ç¨ (r√©f√©rencement national)

Reste naturelle, professionnelle et guide la conversation √©tape par √©tape.`;

    return basePrompt;
  }

  private updateConversationStage(message: string): void {
    const lowerMessage = message.toLowerCase();
    
    // CORRECTION: Progression plus intelligente sans r√©p√©titions
    if (this.clientInfo.conversationStage === 'accueil' && this.clientInfo.metier) {
      this.clientInfo.conversationStage = 'qualification_besoin';
      console.log('üìã Passage √† la qualification du besoin');
    }
    else if (this.clientInfo.conversationStage === 'qualification_besoin' && this.clientInfo.situation) {
      this.clientInfo.conversationStage = 'qualification_zone';
      console.log('üìã Passage √† la qualification de zone');
    }
    else if (this.clientInfo.conversationStage === 'qualification_zone' && this.clientInfo.zone) {
      this.clientInfo.conversationStage = 'proposition_adaptee';
      console.log('üìã Passage √† la proposition adapt√©e');
    }
    else if (this.clientInfo.conversationStage === 'proposition_adaptee') {
      if (lowerMessage.includes('int√©resse') || lowerMessage.includes('oui') || lowerMessage.includes('d\'accord') || lowerMessage.includes('ok')) {
        this.clientInfo.conversationStage = 'proposition_contact';
        console.log('üìã Passage √† la proposition de contact');
      }
    }
    // Les transitions vers collecte_infos sont g√©r√©es dans extractClientInfo
  }

  // CORRECTION CRITIQUE: Remplir le formulaire SEULEMENT si le client a choisi "formulaire" ET √©tape par √©tape
  private fillFormProgressively(): void {
    if (!this.fillFormCallback || this.clientInfo.choixContact !== 'formulaire') {
      console.log('‚ùå Pas de remplissage - client n\'a pas choisi formulaire ou callback manquant');
      return;
    }
    
    const formData: any = {};
    let hasNewData = false;
    
    // Remplir SEULEMENT le champ correspondant √† l'√©tape actuelle
    if (this.clientInfo.formulaireEtape === 'nom' && this.clientInfo.nom) {
      formData.name = this.clientInfo.nom.trim();
      hasNewData = true;
      console.log('üìù Remplissage du NOM:', formData.name);
    }
    
    if (this.clientInfo.formulaireEtape === 'email' && this.clientInfo.email) {
      formData.email = this.clientInfo.email.trim();
      hasNewData = true;
      console.log('üìù Remplissage de l\'EMAIL:', formData.email);
    }
    
    if (this.clientInfo.formulaireEtape === 'tel' && this.clientInfo.telephone) {
      formData.phone = this.clientInfo.telephone.trim();
      hasNewData = true;
      console.log('üìù Remplissage du T√âL√âPHONE:', formData.phone);
    }
    
    if (this.clientInfo.formulaireEtape === 'entreprise' && this.clientInfo.metier) {
      formData.business = this.clientInfo.metier.trim();
      hasNewData = true;
      console.log('üìù Remplissage de l\'ENTREPRISE:', formData.business);
    }
    
    if (this.clientInfo.formulaireEtape === 'message' && this.clientInfo.metier) {
      let message = `Secteur d'activit√©: ${this.clientInfo.metier || 'Non sp√©cifi√©'}\n`;
      message += `Zone d'intervention: ${this.clientInfo.zone || 'Non sp√©cifi√©e'}\n`;
      message += `Situation actuelle: ${this.clientInfo.situation || 'Non sp√©cifi√©e'}\n`;
      message += '\n[Demande qualifi√©e par l\'assistant IA Nova - Aerodrone Multiservices]';
      formData.message = message;
      hasNewData = true;
      console.log('üìù Remplissage du MESSAGE:', formData.message);
    }
    
    // Remplir le formulaire SEULEMENT si on a de nouvelles donn√©es ET que le client a choisi "formulaire"
    if (hasNewData && this.clientInfo.choixContact === 'formulaire') {
      console.log('üìù REMPLISSAGE FORMULAIRE STABLE (√©tape par √©tape):', formData);
      this.fillFormCallback(formData);
    } else {
      console.log('‚ùå Pas de remplissage formulaire - conditions non remplies ou pas de nouvelles donn√©es');
    }
  }

  async getPerformanceStats() {
    return await learningService.getPerformanceStats();
  }

  endConversation(outcome: ConversationData['outcome'] = 'abandoned'): void {
    learningService.endConversation(outcome);
  }

  clearHistory(): void {
    learningService.endConversation('abandoned');
    super.clearHistory();
    this.sessionId = this.generateSessionId();
    this.currentStage = 1;
    this.clientInfo = { conversationStage: 'accueil' };
    this.isInitialized = true;
    learningService.startConversation(this.sessionId);
    console.log('üîÑ Nouvelle session STABLE d√©marr√©e:', this.sessionId);
  }
}
