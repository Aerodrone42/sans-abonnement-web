
export class SpeechSynthesisService {
  private synth: SpeechSynthesis;
  private voice: SpeechSynthesisVoice | null = null;
  private currentUtterance: SpeechSynthesisUtterance | null = null;
  private isForceStoppedRef: { current: boolean } = { current: false };

  constructor() {
    this.synth = window.speechSynthesis;
    this.initVoice();
  }

  private initVoice() {
    const setVoice = () => {
      const voices = this.synth.getVoices();
      
      // Prioriser les voix fran√ßaises les plus naturelles
      this.voice = 
        // Chercher d'abord les voix Google fran√ßaises (les plus naturelles)
        voices.find(voice => 
          voice.lang.startsWith('fr') && 
          voice.name.includes('Google') && 
          (voice.name.includes('Am√©lie') || voice.name.includes('C√©line') || voice.name.includes('Fran√ßaise'))
        ) ||
        // Puis les voix Microsoft fran√ßaises
        voices.find(voice => 
          voice.lang.startsWith('fr') && 
          voice.name.includes('Microsoft') &&
          (voice.name.includes('Hortense') || voice.name.includes('Julie'))
        ) ||
        // Puis toute voix fran√ßaise premium
        voices.find(voice => 
          voice.lang.startsWith('fr') && 
          (voice.name.includes('Premium') || voice.name.includes('Enhanced'))
        ) ||
        // Sinon premi√®re voix fran√ßaise disponible
        voices.find(voice => voice.lang.startsWith('fr')) || 
        voices[0];
      
      console.log('Voice selected:', this.voice?.name, 'Lang:', this.voice?.lang);
    };

    if (this.synth.getVoices().length > 0) {
      setVoice();
    } else {
      this.synth.addEventListener('voiceschanged', setVoice);
    }
  }

  // NOUVELLE M√âTHODE: Nettoyer le texte des caract√®res sp√©ciaux
  private cleanTextForSpeech(text: string): string {
    return text
      // Remplacer les caract√®res sp√©ciaux par leur √©quivalent parl√©
      .replace(/‚Ç¨/g, ' euros')
      .replace(/\$/g, ' dollars')
      .replace(/%/g, ' pourcent')
      .replace(/&/g, ' et ')
      .replace(/@/g, ' arobase ')
      .replace(/#/g, ' di√®se ')
      .replace(/\*/g, ' ')
      .replace(/\+/g, ' plus ')
      .replace(/=/g, ' √©gal ')
      .replace(/_/g, ' ')
      .replace(/\|/g, ' ')
      .replace(/\\/g, ' ')
      .replace(/\//g, ' ')
      .replace(/\^/g, ' ')
      .replace(/`/g, ' ')
      .replace(/~/g, ' ')
      .replace(/\[/g, ' ')
      .replace(/\]/g, ' ')
      .replace(/\{/g, ' ')
      .replace(/\}/g, ' ')
      .replace(/<>/g, ' ')
      .replace(/</g, ' ')
      .replace(/>/g, ' ')
      
      // Nettoyer les points de suspension
      .replace(/\.{3,}/g, ' ')
      .replace(/\.{2}/g, '. ')
      
      // Nettoyer les tirets multiples
      .replace(/-{2,}/g, ' ')
      .replace(/_{2,}/g, ' ')
      
      // Nettoyer les espaces multiples
      .replace(/\s+/g, ' ')
      
      // Nettoyer les √©mojis et caract√®res Unicode sp√©ciaux
      .replace(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu, ' ')
      
      // Nettoyer les caract√®res de contr√¥le
      .replace(/[\x00-\x1F\x7F]/g, ' ')
      
      // Trim final
      .trim();
  }

  speak(text: string, onEnd?: () => void): void {
    console.log('üîä Texte original:', text.substring(0, 50) + '...');
    
    // NETTOYER le texte avant la synth√®se
    const cleanText = this.cleanTextForSpeech(text);
    console.log('üßπ Texte nettoy√©:', cleanText.substring(0, 50) + '...');
    
    // Arr√™ter toute synth√®se en cours
    this.synth.cancel();
    
    // R√©initialiser le flag d'arr√™t forc√© APR√àS avoir arr√™t√© la synth√®se pr√©c√©dente
    this.isForceStoppedRef.current = false;

    // Cr√©er l'utterance avec le texte nettoy√©
    const utterance = new SpeechSynthesisUtterance(cleanText);
    this.currentUtterance = utterance;
    
    if (this.voice) {
      utterance.voice = this.voice;
      console.log('üé§ Using voice:', this.voice.name);
    }
    
    // Param√®tres optimis√©s pour une voix plus naturelle
    utterance.rate = 0.95;        // L√©g√®rement plus lent pour √™tre plus naturel
    utterance.pitch = 1.1;        // Pitch l√©g√®rement plus √©lev√© pour une voix f√©minine agr√©able
    utterance.volume = 0.9;       // Volume l√©g√®rement r√©duit pour √©viter la saturation
    
    // Gestion des √©v√©nements
    utterance.onstart = () => {
      console.log('üéØ Speech started successfully');
    };
    
    utterance.onend = () => {
      console.log('‚úÖ Speech ended normally');
      this.currentUtterance = null;
      if (onEnd && !this.isForceStoppedRef.current) {
        onEnd();
      }
    };
    
    utterance.onerror = (event) => {
      console.error('‚ùå Speech synthesis error:', event.error);
      this.currentUtterance = null;
      if (onEnd && !this.isForceStoppedRef.current) {
        onEnd();
      }
    };

    // D√©marrer imm√©diatement
    console.log('üöÄ Launching speech synthesis...');
    this.synth.speak(utterance);
  }

  stop(): void {
    console.log('üõë Stopping speech synthesis - FORCE STOP');
    
    // Marquer l'arr√™t comme forc√©
    this.isForceStoppedRef.current = true;
    
    if (this.currentUtterance) {
      this.currentUtterance.onend = null;
      this.currentUtterance.onerror = null;
      this.currentUtterance = null;
    }
    
    // Arr√™ter imm√©diatement
    if (this.synth.speaking || this.synth.pending) {
      this.synth.cancel();
    }
  }

  isSpeaking(): boolean {
    return this.synth.speaking && this.currentUtterance !== null && !this.isForceStoppedRef.current;
  }

  getSynthesisState(): string {
    if (this.isForceStoppedRef.current) return 'force-stopped';
    if (this.synth.speaking) return 'speaking';
    if (this.synth.pending) return 'pending';
    return 'idle';
  }
}
