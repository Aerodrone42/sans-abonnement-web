
import { useState, useRef, useEffect } from 'react';
import { EnhancedChatGPTService } from '@/services/enhancedChatGptService';
import { SpeechSynthesisService } from '@/services/speechSynthesisService';

interface UseVoiceRecognitionProps {
  onTranscript: (text: string, field: string) => void;
  conversationMode: boolean;
  chatGPT: EnhancedChatGPTService | null;
}

interface ExtendedSpeechRecognition extends SpeechRecognition {
  onend: ((this: SpeechRecognition, ev: Event) => any) | null;
  onerror: ((this: SpeechRecognition, ev: SpeechRecognitionErrorEvent) => any) | null;
  onresult: ((this: SpeechRecognition, ev: SpeechRecognitionEvent) => any) | null;
}

export const useVoiceRecognition = ({ onTranscript, conversationMode, chatGPT }: UseVoiceRecognitionProps) => {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);
  const [lastResponse, setLastResponse] = useState("");
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isConversationActive, setIsConversationActive] = useState(false);
  
  const recognitionRef = useRef<ExtendedSpeechRecognition | null>(null);
  const mediaStreamRef = useRef<MediaStream | null>(null);
  const speechSynthesis = useRef(new SpeechSynthesisService()).current;
  const restartTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const silenceTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  
  const shouldContinueRef = useRef(false);
  const processingRef = useRef(false);
  const speakingRef = useRef(false);
  const lastTranscriptRef = useRef("");
  const interimResultRef = useRef("");

  const cleanup = () => {
    console.log('üßπ Nettoyage microphone');
    shouldContinueRef.current = false;
    speakingRef.current = false;
    setIsListening(false);
    setIsConversationActive(false);
    
    if (restartTimeoutRef.current) {
      clearTimeout(restartTimeoutRef.current);
      restartTimeoutRef.current = null;
    }
    
    if (silenceTimeoutRef.current) {
      clearTimeout(silenceTimeoutRef.current);
      silenceTimeoutRef.current = null;
    }
    
    if (mediaStreamRef.current) {
      mediaStreamRef.current.getTracks().forEach(track => track.stop());
      mediaStreamRef.current = null;
    }

    if (recognitionRef.current) {
      try {
        recognitionRef.current.stop();
      } catch (error) {
        console.log('Recognition d√©j√† arr√™t√©e');
      }
    }
  };

  const stopSpeaking = () => {
    console.log('üõë ARR√äT COMPLET');
    shouldContinueRef.current = false;
    speakingRef.current = false;
    setIsConversationActive(false);
    speechSynthesis.stop();
    setIsSpeaking(false);
    setIsProcessing(false);
    processingRef.current = false;
    cleanup();
  };

  const processAIResponse = async (finalTranscript: string) => {
    console.log('ü§ñ D√©but traitement IA:', finalTranscript);
    
    // V√©rifier si c'est un transcript valide et non vide
    if (!finalTranscript || finalTranscript.trim().length < 2) {
      console.log('‚ùå Transcript trop court, ignor√©:', finalTranscript);
      return;
    }
    
    setIsProcessing(true);
    processingRef.current = true;
    console.log('‚úÖ √âtat isProcessing activ√©');
    
    if (!conversationMode || !chatGPT || !shouldContinueRef.current) {
      console.log('‚ùå Conditions non remplies - fallback vers onTranscript');
      setTimeout(() => {
        setIsProcessing(false);
        processingRef.current = false;
        onTranscript(finalTranscript, "message");
      }, 500);
      return;
    }

    if (recognitionRef.current && isListening) {
      try {
        recognitionRef.current.stop();
        setIsListening(false);
        console.log('üîá √âcoute arr√™t√©e pour traitement');
      } catch (error) {
        console.log('Erreur arr√™t recognition');
      }
    }

    try {
      console.log('üì§ Envoi √† ChatGPT...');
      const response = await chatGPT.sendMessage(finalTranscript);
      
      if (!shouldContinueRef.current) {
        console.log('‚ùå Conversation interrompue');
        return;
      }
      
      setLastResponse(response);
      setIsSpeaking(true);
      speakingRef.current = true;
      
      console.log('üîä D√©but synth√®se vocale');
      speechSynthesis.speak(response, () => {
        console.log('‚úÖ Synth√®se termin√©e');
        setIsSpeaking(false);
        speakingRef.current = false;
        
        if (shouldContinueRef.current && isConversationActive) {
          console.log('üîÑ Red√©marrage auto dans 2500ms (d√©lai √©tendu pour √©viter les coupures)');
          restartTimeoutRef.current = setTimeout(() => {
            if (shouldContinueRef.current && !speakingRef.current && !processingRef.current && recognitionRef.current) {
              try {
                recognitionRef.current.start();
                setIsListening(true);
                console.log('üéôÔ∏è Red√©marrage r√©ussi apr√®s d√©lai √©tendu');
              } catch (error) {
                console.error('‚ùå Erreur red√©marrage:', error);
              }
            } else {
              console.log('üö´ Red√©marrage annul√© - conditions non remplies');
            }
          }, 2500); // D√©lai augment√© de 1500ms √† 2500ms
        }
      });
      
    } catch (error) {
      console.error('‚ùå Erreur ChatGPT:', error);
      
      if (shouldContinueRef.current && isConversationActive) {
        restartTimeoutRef.current = setTimeout(() => {
          if (shouldContinueRef.current && !speakingRef.current && recognitionRef.current) {
            try {
              recognitionRef.current.start();
              setIsListening(true);
              console.log('üîÑ Red√©marrage apr√®s erreur');
            } catch (error) {
              console.error('‚ùå Erreur red√©marrage post-erreur:', error);
            }
          }
        }, 3000); // D√©lai augment√© pour les erreurs
      }
    } finally {
      setIsProcessing(false);
      processingRef.current = false;
      console.log('üèÅ Fin traitement IA');
    }
  };

  const startListening = async () => {
    console.log('üéØ D√âMARRAGE conversation');
    
    if (!recognitionRef.current) {
      console.log('‚ùå Recognition indisponible');
      return;
    }

    if (isSpeaking) {
      speechSynthesis.stop();
      setIsSpeaking(false);
      speakingRef.current = false;
    }

    try {
      if (!mediaStreamRef.current) {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        mediaStreamRef.current = stream;
        console.log('üé§ Permission micro obtenue');
      }

      shouldContinueRef.current = true;
      setIsConversationActive(true);

      recognitionRef.current.start();
      setIsListening(true);
      
      console.log('‚úÖ Conversation ACTIVE');
    } catch (error) {
      console.error('‚ùå Erreur d√©marrage:', error);
      cleanup();
    }
  };

  const stopListening = () => {
    console.log('üõë ARR√äT conversation demand√©');
    setIsConversationActive(false);
    stopSpeaking();
  };

  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognitionClass = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      const recognition = new SpeechRecognitionClass() as ExtendedSpeechRecognition;
      recognitionRef.current = recognition;
      
      recognition.continuous = true;
      recognition.interimResults = true;
      recognition.lang = 'fr-FR';

      recognition.onresult = (event) => {
        let finalTranscript = '';
        let interimTranscript = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript;
          if (event.results[i].isFinal) {
            finalTranscript += transcript;
          } else {
            interimTranscript += transcript;
          }
        }
        
        // Mettre √† jour l'affichage en temps r√©el
        if (interimTranscript) {
          interimResultRef.current = interimTranscript;
          setTranscript(lastTranscriptRef.current + interimTranscript);
        }
        
        if (finalTranscript.trim()) {
          console.log('üéØ TRANSCRIPT FINAL:', finalTranscript);
          lastTranscriptRef.current += finalTranscript;
          setTranscript(lastTranscriptRef.current);
          
          // R√©initialiser le timer de silence
          if (silenceTimeoutRef.current) {
            clearTimeout(silenceTimeoutRef.current);
          }
          
          // Attendre 3 secondes de silence avant de traiter
          silenceTimeoutRef.current = setTimeout(() => {
            if (lastTranscriptRef.current.trim()) {
              console.log('‚è∞ Traitement apr√®s silence de 3s:', lastTranscriptRef.current);
              processAIResponse(lastTranscriptRef.current.trim());
              lastTranscriptRef.current = "";
              interimResultRef.current = "";
            }
          }, 3000); // 3 secondes de silence avant traitement
        }
      };

      recognition.onerror = (event) => {
        console.error('‚ùå Erreur recognition:', event.error);
        setIsListening(false);
        
        if (shouldContinueRef.current && isConversationActive && !processingRef.current && !speakingRef.current) {
          console.log('üîÑ Red√©marrage apr√®s erreur (avec v√©rifications √©tendues)');
          restartTimeoutRef.current = setTimeout(() => {
            if (shouldContinueRef.current && !speakingRef.current && !processingRef.current && recognitionRef.current) {
              try {
                recognitionRef.current.start();
                setIsListening(true);
              } catch (error) {
                console.error('Erreur red√©marrage:', error);
              }
            }
          }, 2000); // D√©lai augment√© pour les erreurs
        }
      };

      recognition.onend = () => {
        console.log('üèÅ Recognition termin√©e');
        setIsListening(false);
        
        if (shouldContinueRef.current && isConversationActive && !processingRef.current && !speakingRef.current) {
          console.log('üîÑ Auto-restart recognition (conditions v√©rifi√©es avec d√©lai √©tendu)');
          restartTimeoutRef.current = setTimeout(() => {
            if (shouldContinueRef.current && !speakingRef.current && !processingRef.current && recognitionRef.current) {
              try {
                recognitionRef.current.start();
                setIsListening(true);
                console.log('‚úÖ Auto-restart r√©ussi avec v√©rifications renforc√©es et d√©lai √©tendu');
              } catch (error) {
                console.error('Erreur auto-restart:', error);
              }
            } else {
              console.log('üö´ Auto-restart annul√© - une condition a √©chou√©');
            }
          }, 1200); // D√©lai augment√© de 800ms √† 1200ms
        } else {
          console.log('üö´ Auto-restart ignor√© - traitement ou synth√®se en cours');
        }
      };
      
      console.log('üéôÔ∏è Speech Recognition configur√©e avec logique anti-coupure renforc√©e');
    }

    return cleanup;
  }, []);

  return {
    isListening,
    transcript,
    isProcessing,
    lastResponse,
    isSpeaking,
    isConversationActive,
    startListening,
    stopListening,
    stopSpeaking,
    cleanupMicrophone: cleanup
  };
};
