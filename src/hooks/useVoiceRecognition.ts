
import { useState, useRef, useEffect } from 'react';
import { EnhancedChatGPTService } from '@/services/enhancedChatGptService';
import { SpeechSynthesisService } from '@/services/speechSynthesisService';

interface UseVoiceRecognitionProps {
  onTranscript: (text: string, field: string) => void;
  conversationMode: boolean;
  chatGPT: EnhancedChatGPTService | null;
}

// Extension des types pour SpeechRecognition
interface ExtendedSpeechRecognition extends SpeechRecognition {
  onend: ((this: SpeechRecognition, ev: Event) => any) | null;
  onerror: ((this: SpeechRecognition, ev: SpeechRecognitionErrorEvent) => any) | null;
  onresult: ((this: SpeechRecognition, ev: SpeechRecognitionEvent) => any) | null;
}

export const useVoiceRecognition = ({ onTranscript, conversationMode, chatGPT }: UseVoiceRecognitionProps) => {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);
  const [lastResponse, setLastResponse] = useState("");
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isConversationActive, setIsConversationActive] = useState(false);
  
  const recognitionRef = useRef<ExtendedSpeechRecognition | null>(null);
  const mediaStreamRef = useRef<MediaStream | null>(null);
  const speechSynthesis = useRef(new SpeechSynthesisService()).current;
  const isStoppedRef = useRef(false);
  const autoRestartTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  const cleanupMicrophone = () => {
    console.log('üßπ Nettoyage complet du microphone...');
    setIsListening(false);
    setIsConversationActive(false);
    
    // Nettoyer tous les timeouts
    if (autoRestartTimeoutRef.current) {
      clearTimeout(autoRestartTimeoutRef.current);
      autoRestartTimeoutRef.current = null;
    }
    
    if (mediaStreamRef.current) {
      mediaStreamRef.current.getTracks().forEach(track => {
        console.log('üõë Arr√™t track:', track.kind);
        track.stop();
      });
      mediaStreamRef.current = null;
    }

    if (recognitionRef.current) {
      try {
        recognitionRef.current.stop();
      } catch (error) {
        console.log('Recognition d√©j√† arr√™t√©e');
      }
    }
  };

  const stopSpeaking = () => {
    console.log('üõë ARR√äT TOTAL - stopSpeaking appel√©');
    
    isStoppedRef.current = true;
    setIsConversationActive(false);
    speechSynthesis.stop();
    setIsSpeaking(false);
    setIsProcessing(false);
    
    if (autoRestartTimeoutRef.current) {
      clearTimeout(autoRestartTimeoutRef.current);
      autoRestartTimeoutRef.current = null;
    }
    
    console.log('‚úÖ IA compl√®tement arr√™t√©e');
  };

  // Fonction simplifi√©e de red√©marrage
  const scheduleRestart = (delay: number = 1000) => {
    console.log(`‚è∞ Programmation red√©marrage dans ${delay}ms`);
    
    // Nettoyer ancien timeout
    if (autoRestartTimeoutRef.current) {
      clearTimeout(autoRestartTimeoutRef.current);
    }
    
    autoRestartTimeoutRef.current = setTimeout(async () => {
      console.log('üîÑ TENTATIVE DE RED√âMARRAGE');
      console.log('- isStoppedRef:', isStoppedRef.current);
      console.log('- isConversationActive:', isConversationActive);
      console.log('- isListening:', isListening);
      console.log('- isSpeaking:', isSpeaking);
      console.log('- isProcessing:', isProcessing);
      
      if (isStoppedRef.current || !isConversationActive) {
        console.log('‚ùå Red√©marrage annul√© - conversation arr√™t√©e');
        return;
      }

      if (isListening || isSpeaking || isProcessing) {
        console.log('‚ùå Red√©marrage annul√© - autre activit√© en cours');
        return;
      }

      try {
        console.log('üöÄ RED√âMARRAGE EFFECTIF');
        
        // S'assurer qu'on a le stream micro
        if (!mediaStreamRef.current) {
          const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
          mediaStreamRef.current = stream;
        }

        if (recognitionRef.current) {
          recognitionRef.current.start();
          setIsListening(true);
          console.log('‚úÖ √âcoute red√©marr√©e avec succ√®s');
        }
      } catch (error) {
        console.error('‚ùå Erreur red√©marrage:', error);
        // Retry apr√®s d√©lai plus long
        if (isConversationActive && !isStoppedRef.current) {
          scheduleRestart(2000);
        }
      }
    }, delay);
  };

  const processAIResponse = async (finalTranscript: string) => {
    console.log('ü§ñ === D√âBUT processAIResponse ===');
    console.log('ü§ñ Input:', finalTranscript);
    console.log('ü§ñ conversationMode:', conversationMode);
    console.log('ü§ñ chatGPT disponible:', !!chatGPT);
    
    if (!conversationMode || !chatGPT) {
      console.log('‚ùå Mode conversation d√©sactiv√© ou ChatGPT non disponible');
      onTranscript(finalTranscript, "message");
      scheduleRestart(1000); // Red√©marrer m√™me en mode normal
      return;
    }

    if (isStoppedRef.current) {
      console.log('‚ùå Traitement annul√© - conversation arr√™t√©e');
      return;
    }

    console.log('ü§ñ D√©but traitement IA...');
    setIsProcessing(true);
    
    // Arr√™ter l'√©coute pendant le traitement
    if (recognitionRef.current && isListening) {
      try {
        recognitionRef.current.stop();
        setIsListening(false);
        console.log('üõë √âcoute arr√™t√©e pour traitement IA');
      } catch (error) {
        console.log('Recognition d√©j√† arr√™t√©e');
      }
    }

    try {
      console.log('üì§ Envoi √† ChatGPT...');
      const response = await chatGPT.sendMessage(finalTranscript);
      console.log('üì• R√©ponse ChatGPT re√ßue:', response.substring(0, 100) + '...');
      
      if (isStoppedRef.current) {
        console.log('‚ùå Conversation arr√™t√©e pendant traitement ChatGPT');
        setIsProcessing(false);
        return;
      }
      
      setLastResponse(response);
      setIsProcessing(false);
      setIsSpeaking(true);
      
      console.log('üîä D√©but synth√®se vocale...');
      
      // Parler avec callback simplifi√©
      speechSynthesis.speak(response, () => {
        console.log('‚úÖ Synth√®se vocale termin√©e');
        setIsSpeaking(false);
        
        // Red√©marrage imm√©diat apr√®s la synth√®se
        if (!isStoppedRef.current && isConversationActive) {
          console.log('üéØ Programmation red√©marrage apr√®s synth√®se');
          scheduleRestart(500); // D√©lai court
        } else {
          console.log('‚ùå Red√©marrage non programm√©');
          console.log('- isStoppedRef:', isStoppedRef.current);
          console.log('- isConversationActive:', isConversationActive);
        }
      });
      
    } catch (error) {
      console.error('‚ùå Erreur ChatGPT:', error);
      setIsProcessing(false);
      setIsSpeaking(false);
      
      // Red√©marrer m√™me en cas d'erreur
      if (!isStoppedRef.current && isConversationActive) {
        console.log('üîÑ Red√©marrage apr√®s erreur');
        scheduleRestart(2000);
      }
    }
    
    console.log('ü§ñ === FIN processAIResponse ===');
  };

  const startListening = async () => {
    if (!recognitionRef.current) {
      console.log('‚ùå Recognition non disponible');
      return;
    }

    try {
      if (isListening && isConversationActive) {
        console.log('üõë Arr√™t de la conversation en cours...');
        stopSpeaking();
        cleanupMicrophone();
        return;
      }

      console.log('üöÄ D√©marrage nouvelle conversation');
      isStoppedRef.current = false;
      setIsConversationActive(true);

      if (isSpeaking) {
        stopSpeaking();
      }

      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaStreamRef.current = stream;

      recognitionRef.current.start();
      setIsListening(true);
      
      console.log('üé§ Conversation continue d√©marr√©e');
    } catch (error) {
      console.error('‚ùå Erreur d√©marrage conversation:', error);
      cleanupMicrophone();
    }
  };

  const stopListening = () => {
    console.log('üõë Arr√™t complet de la conversation');
    setIsConversationActive(false);
    stopSpeaking();
    cleanupMicrophone();
  };

  // Configuration de la reconnaissance vocale
  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognitionClass = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      const recognition = new SpeechRecognitionClass() as ExtendedSpeechRecognition;
      recognitionRef.current = recognition;
      
      recognition.continuous = true;
      recognition.interimResults = true;
      recognition.lang = 'fr-FR';

      recognition.onresult = (event) => {
        let finalTranscript = '';
        for (let i = event.resultIndex; i < event.results.length; i++) {
          if (event.results[i].isFinal) {
            finalTranscript += event.results[i][0].transcript;
          }
        }
        
        if (finalTranscript.trim()) {
          console.log('üéØ Transcript final d√©tect√©:', finalTranscript);
          setTranscript(finalTranscript);
          
          // Traitement imm√©diat du transcript
          console.log('‚ö° Traitement imm√©diat du transcript');
          processAIResponse(finalTranscript);
        }
      };

      recognition.onerror = (event) => {
        console.error('‚ùå Erreur reconnaissance:', event.error);
        setIsListening(false);
        
        // Red√©marrage automatique apr√®s erreur
        if (isConversationActive && !isStoppedRef.current) {
          console.log('üîÑ Red√©marrage apr√®s erreur de reconnaissance');
          scheduleRestart(1500);
        }
      };

      recognition.onend = () => {
        console.log('üèÅ Reconnaissance termin√©e');
        setIsListening(false);
        
        // Red√©marrage automatique si conversation active et pas en traitement
        if (isConversationActive && !isStoppedRef.current && !isSpeaking && !isProcessing) {
          console.log('üîÑ Auto-red√©marrage apr√®s fin normale');
          scheduleRestart(500);
        } else {
          console.log('‚ùå Pas de red√©marrage - conditions:');
          console.log('- isConversationActive:', isConversationActive);
          console.log('- isStoppedRef:', isStoppedRef.current);
          console.log('- isSpeaking:', isSpeaking);
          console.log('- isProcessing:', isProcessing);
        }
      };
    } else {
      console.error('‚ùå Reconnaissance vocale non support√©e');
    }

    return () => {
      cleanupMicrophone();
      stopSpeaking();
    };
  }, [onTranscript, conversationMode, chatGPT, isConversationActive, isSpeaking, isProcessing]);

  return {
    isListening,
    transcript,
    isProcessing,
    lastResponse,
    isSpeaking,
    isConversationActive,
    startListening,
    stopListening,
    stopSpeaking,
    cleanupMicrophone
  };
};
