
import { useState, useEffect } from 'react';
import { EnhancedChatGPTService } from '@/services/enhancedChatGptService';

interface UseAIInitializationProps {
  fillFormFromAI?: (aiData: Partial<any>) => void;
  submitFromAI?: () => Promise<void>;
}

export const useAIInitialization = ({ fillFormFromAI, submitFromAI }: UseAIInitializationProps) => {
  const [chatGPT, setChatGPT] = useState<EnhancedChatGPTService | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);
  const [initError, setInitError] = useState<string | null>(null);
  const [isRetrying, setIsRetrying] = useState(false);
  const [initialGreeting, setInitialGreeting] = useState("");

  const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY || "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";

  const initializeChatGPT = async (isRetry = false) => {
    if (isRetry) {
      setIsRetrying(true);
    }
    
    console.log('üîµ D√âBUT INITIALISATION ChatGPT', isRetry ? '(RETRY)' : '(PREMI√àRE FOIS)');
    
    try {
      if (!OPENAI_API_KEY || OPENAI_API_KEY.length < 10) {
        throw new Error('Cl√© API OpenAI manquante ou invalide');
      }
      
      const chatGPTInstance = new EnhancedChatGPTService(OPENAI_API_KEY);
      console.log('‚úÖ Instance ChatGPT cr√©√©e');
      
      if (fillFormFromAI && submitFromAI) {
        chatGPTInstance.setFormCallbacks(fillFormFromAI, submitFromAI);
        console.log('‚úÖ Callbacks configur√©s');
      } else {
        console.warn('‚ö†Ô∏è Callbacks manquants - fillFormFromAI:', !!fillFormFromAI, 'submitFromAI:', !!submitFromAI);
      }
      
      // CORRECTION: D√©finir l'instance IMM√âDIATEMENT dans le state AVANT tout traitement async
      setChatGPT(chatGPTInstance);
      setIsInitialized(true);
      setInitError(null);
      console.log('üéØ Instance ChatGPT d√©finie dans le state IMM√âDIATEMENT');
      
      // Le greeting peut se faire en arri√®re-plan APR√àS que l'instance soit disponible
      try {
        console.log('üéØ G√©n√©ration du message d\'accueil...');
        const greeting = await chatGPTInstance.startConversation();
        setInitialGreeting(greeting);
        console.log('‚úÖ Message d\'accueil re√ßu:', greeting);
      } catch (greetingError) {
        console.error('‚ùå Erreur message d\'accueil:', greetingError);
        setInitialGreeting("Bonjour ! Je suis Nova, votre conseiller IA. Quel est votre secteur d'activit√© ?");
      }
      
      console.log('üéâ ChatGPT TOTALEMENT INITIALIS√â ET OP√âRATIONNEL');
      
    } catch (error) {
      console.error('‚ùå ERREUR CRITIQUE initialisation ChatGPT:', error);
      setInitError(error instanceof Error ? error.message : 'Erreur inconnue');
      setIsInitialized(false);
      setChatGPT(null);
      setInitialGreeting("Service temporairement indisponible. Veuillez remplir le formulaire manuellement.");
    } finally {
      setIsRetrying(false);
    }
  };

  const reinitialize = () => {
    console.log('üîÑ R√âINITIALISATION FORC√âE');
    setIsInitialized(false);
    setInitError(null);
    setChatGPT(null);
    setInitialGreeting("");
    initializeChatGPT(true);
  };

  useEffect(() => {
    if (!isInitialized && !initError && !chatGPT) {
      initializeChatGPT();
    }
  }, [fillFormFromAI, submitFromAI]);

  // CORRECTION: Debug du state
  useEffect(() => {
    console.log('üîç STATE AI HOOK - chatGPT:', !!chatGPT, 'isInitialized:', isInitialized);
  }, [chatGPT, isInitialized]);

  return {
    chatGPT,
    isInitialized,
    initError,
    isRetrying,
    initialGreeting,
    reinitialize
  };
};
